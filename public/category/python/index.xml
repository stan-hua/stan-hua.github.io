<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | Stanley Z. Hua</title>
    <link>https://stanhua.rbind.io/category/python/</link>
      <atom:link href="https://stanhua.rbind.io/category/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 11 Jul 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://stanhua.rbind.io/img/me</url>
      <title>Python</title>
      <link>https://stanhua.rbind.io/category/python/</link>
    </image>
    
    <item>
      <title>Save the Pandas...library</title>
      <link>https://stanhua.rbind.io/post/pandas/useful_commands_to_remember/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://stanhua.rbind.io/post/pandas/useful_commands_to_remember/</guid>
      <description>


&lt;style&gt;
body {font-size: 10pt}
h2{
  text-decoration: underline;
  line-height: 5pt;
  text-align: center;
  padding-top: 30px;
}
&lt;/style&gt;
&lt;p&gt;By convention, “&lt;strong&gt;&lt;em&gt;df&lt;/em&gt;&lt;/strong&gt;” will refer to a dataframe object, while “&lt;strong&gt;&lt;em&gt;Series&lt;/em&gt;&lt;/strong&gt;” will refer to a series object.&lt;/p&gt;
&lt;hr /&gt;
&lt;!-- ### --&gt;
&lt;!-- ``` --&gt;
&lt;!-- ``` --&gt;
&lt;!-- &lt;br&gt; --&gt;
&lt;div id=&#34;importing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Importing&lt;/h2&gt;
&lt;div id=&#34;importing-the-libraries&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Importing the Libraries&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
import numpy as np        #NumPy library required by Pandas library&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;read-csv-file-data&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Read csv file data&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df = pd.read_csv(file_path, index_col=None)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- ################################################################ --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;about-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;About dataset&lt;/h2&gt;
&lt;div id=&#34;check-column-names&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Check column names&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.columns

Series.name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;check-shape-of-object&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Check shape of object&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.shape

Series.shape&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;columns-of-a-specific-data-type-type&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Columns of a specific data type type&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.dtypes == &amp;#39;object&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;describe-data&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Describe data&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.describe()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;unique-vs-nunique&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Unique vs Nunique&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;for col in df.columns:    # for loop to get column names
  df[col].unique()            # returns unique values in column &amp;#39;col&amp;#39;
  df[col].nunique()           # returns unique values in column AND drop NAs&lt;/code&gt;&lt;/pre&gt;
&lt;!-- ################################################################ --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slicing-and-filtering&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slicing and Filtering&lt;/h2&gt;
&lt;div id=&#34;filter&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Filter&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.filter(items=, like=None)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;iloc&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iloc.html&#34; target=&#34;_blank&#34;&gt;Iloc &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.iloc[row_position, col_position]    # general format&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&#34;note&#34;&gt;
COPY of dataframe is slice is returned. This CANNOT be used in assignment. Also, note that only integers, its derivations and boolean arrays can be used to index.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loc&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.loc.html&#34; target=&#34;_blank&#34;&gt;Loc&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;index = (df.Color==&amp;quot;Red&amp;quot;) &amp;amp; (df.Item==&amp;quot;Shirt&amp;quot;)        # produces a boolean array
df.loc[index]        # returns original dataframe sliced


df.loc[row_indexer, col_indexer]        #general format&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&#34;note&#34;&gt;
&lt;b&gt;Note&lt;/b&gt;: colon “:” is not needed by col_indexer like in &lt;em&gt;df.loc[index, :]&lt;/em&gt; to choose all columns, and slice of ORIGINAL dataframe is returned. This can be used for assignment.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;query-columns&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Query (columns)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.query(&amp;#39;expression&amp;#39;)    # expression must be conditional using column variable/s
                          # prefix &amp;quot;@&amp;quot; before variable name if outside of dataframe env.
                          # prefix ` ` to encapsulate variable name with spaces&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&#34;note&#34;&gt;
Can be used to filter rows.
&lt;/p&gt;
&lt;!-- ################################################################ --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-processing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Processing&lt;/h2&gt;
&lt;div id=&#34;apply-a-function-on-a-pandas-object&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Apply (a function on a pandas object)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.apply(FUN, axis=0, *args)    # FUN: any (valid) function to apply
                                # axis: axis to assess
                                # *args: additional keyword arguments for FUN&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;assign-new-columns&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Assign (new columns)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.assign(col_4 = col_1*col_2/col_3)&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&#34;note&#34;&gt;
Used to create new columns. Similar to “mutate” in R.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-dummies-one-hot-encoding&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Get Dummies (One Hot Encoding)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.get_dummies(dummy_na=False, columns=None, sparse=False, drop_first=False, dtype=np.uint8)
        # dummy_na: if True, adds dummy column for NA
        # columns: if !None, columns specified will be one hot encoded
        # sparse: whether resulting columns will be SparseArray objects (True) or NumPy arrays(False) 
        # drop_first: removes first unique dummy variable from unique objects in column
        # dtype: data type for new columns (e.g. float)


Series.get_dummies(dummy_na=False, columns=None, sparse=False, drop_first=False, dtype=&amp;#39;np.uint8&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;group-by-then-transform&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Group by, then Transform&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.groupby(by=category).transform(FUN)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;Grouping a dataframe then transforming it is a very common operation. A dataframe is converted into a “GroupBy” object depending on &lt;em&gt;category&lt;/em&gt;, which may be a string or list of strings representing column names. Then the resulting object’s values are passed into &lt;em&gt;FUN&lt;/em&gt; by the transform function and a column of the same size is returned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;handling-na&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Handling NA&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#Finding NA and inverse
df.isna()
Series.isna()

df.notna()
Series.isna()


#Dropping NA
df.dropna(axis=0, how=&amp;#39;any&amp;#39;, thresh=None, subset=None, inplace=False)
        # axis: axis to assess
        # how: when to drop axis (e.g. how=&amp;#39;all&amp;#39; drops IFF all values are NA)
        # thresh: number of NAs in axis to drop
        # subset: labels on axis to be considered
        # inplace: by default, returns new object. If True, modifies existing object
        
Series.dropna(axis=0, how=None,inplace=False)


#Filling NA
df.fillna(value=None, method=None, axis=None, inplace=False, limit=None)
        # value: value to fill holes
        # method: method for filling holes.*
        # inplace: by default, returns new object. If True, modifies existing object
        # limit: max number of consecutive NAs to fill. Will be left as NA if value is exceeded

Series.fillna(value=None, method=None, axis=None, inplace=False, limit=None)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;mapping&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Mapping&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.applymap(FUN)
Series.map(FUN)&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&#34;note&#34;&gt;
Iterates by rows (for Series) and cell (for DataFrame), passing cell value into function with the output value replacing its input value.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;piping-data-through-multiple-functions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Piping Data (through multiple functions)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.pipe(FUN1).pipe(FUN2, arg1=foo).pipe((FUN3, &amp;quot;arg2&amp;quot;), arg1=bar)        
    # when FUN3&amp;#39;s main arg. is not df, supply tuple
      where str contains location for df (e.g. &amp;quot;arg2&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&#34;note&#34;&gt;
&lt;b&gt;NOTE&lt;/b&gt;: similar to %&amp;gt;% operation in R.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rolling&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Rolling&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df.rolling(num_observations).FUN()
Series.rolling(num_observations).FUN()


# Example of counting observations every 7 days past
Series.rolling(&amp;#39;7d&amp;#39;).count()-1        # subtraction excludes day &lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;This is similar to GroupBy then Transform, but function is applied to “rolls” going down a specific column/index.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- ### --&gt;
&lt;!-- ``` --&gt;
&lt;!-- ``` --&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-resources&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Additional Resources&lt;/h3&gt;
&lt;p class=&#34;note&#34;&gt;
A great resource for comparing df.&lt;strong&gt;agg&lt;/strong&gt;(), df.&lt;strong&gt;apply&lt;/strong&gt;(), df.&lt;strong&gt;applymap&lt;/strong&gt;() and df.&lt;strong&gt;transform&lt;/strong&gt;() can be found &lt;a href=&#34;https://stackoverflow.com/questions/46210678/whats-the-difference-between-transform-vs-applymap-for-pandas-dataframe&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
